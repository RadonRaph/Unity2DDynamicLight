// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float2 size;
float radius;



int maxAngles;
RWStructuredBuffer<float> startAngles;
RWStructuredBuffer<float> magAngles;

[numthreads(32, 32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!

	// /!\ 128 est le nombre de pixelPerUnit

	//Vecteur du pixel
	float2 dir = float2(size[0] / 2 - id.x, size[1] / 2 - id.y);
	//Distance du pixel au centre
	float mag = sqrt(dir[0] * dir[0] + dir[1] * dir[1]);
	//Normal du vecteur (pour le calcul d'angle)
	float2 dirNorm = float2(dir[0] / mag, dir[1] / mag);

	//Couleur de base pour le dégradé
	float color = 1-mag/(128*radius);
	//Si la distance est supérieure au rayon (coin) c'est noir
	if (mag > (radius * 128))
	{
		color = 0;
	}
	else
	{
		color = 0;
		//Sinon on calcul l'angle
		float a = atan2(dirNorm[0], dirNorm[1]);
		a = a + 3.14;


		//On compare l'angle au angles enregistré 
		for (int i = 0; i < maxAngles; i = i + 1) {
			if (abs(a) < startAngles[i+1] && abs(a) > startAngles[i] || abs(a) >= 6.27 && startAngles[i] >= 6.265 || abs(a) <= 0.01 && startAngles[i] <= 0.01)
			{
				color = 1-mag / (128 * radius);
				//On récupére la magnitude de l'angle enregistré et on vérifie si notre pixel est plus loin
				if (mag > (radius * 128 * magAngles[i])) {
					color = 0;
				}
			}
		}
	}

	Result[id.xy] = float4(1, 1, 1, color);
}
